# ----------------------------------------
# Configuration File: Price Tracker
# ----------------------------------------

# -- Scraping Settings --

# User agent string to identify your scraper as a legitimate browser. 
# Visit https://www.whatsmyuseragent.com/ to get your current browser's user agent.
user_agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"

# Selenium wait time (in seconds) to allow dynamic page elements (e.g., price) to load.
selenium_wait_time: 20

# Optional: You can add a request delay between checks to avoid overloading servers.
# If using requests instead of Selenium, uncomment and adjust accordingly.
# request_delay_seconds: 15

# -- Scheduling Settings --

# Interval in minutes to re-check all tracked products.
schedule_interval_minutes: 60  # Run every hour

# -- Products to Track --

# Define products to monitor for price drops.
# IMPORTANT: Use browser DevTools to inspect each page and identify accurate CSS selectors.
# These selectors may break if the website layout or DOM structure changes.

products:
  - name: "Product Name Example"  # Descriptive identifier for the product
    url: "https://samplestore.com/product-1"  # Product page URL
    target_price: 799.0  # Send alert if current price drops below this value
    price_selector: 'section[aria-live="polite"] > div > div:first-child'  # CSS selector to extract product price
    name_selector: "img[alt='mall inline badge'] + h1"  # CSS selector to extract product name

# Add additional products using the same structure as above.

# -- Alert Settings --

alert_settings:
  enabled: True  # Set to True to enable email notifications for price drops
  # sender_email: "your_sender_email@gmail.com"  # Optional: override sender email (or load from .env)
  recipient_email: "fingerstyler17@gmail.com"  # Replace with your actual recipient email address
  # Note: Gmail app password (if used) should be securely stored in .env

# -- Logging --

log_file: "logs/price_tracker.log"  # Log file location
log_level: "INFO"  # Logging level (options: DEBUG, INFO, WARNING, ERROR)

# -- Database --

database_file: "data/product_prices.db"  # SQLite database file to store historical price data
